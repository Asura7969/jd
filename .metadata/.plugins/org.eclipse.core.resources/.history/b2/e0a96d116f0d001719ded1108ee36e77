package com.taotao.manage.controller;


import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.taotao.common.bean.EasyUIResult;
import com.taotao.manage.pojo.Item;
import com.taotao.manage.service.ItemService;

@Controller
@RequestMapping("item")
public class ItemController {
    @Autowired
    private ItemService itemService;
    
    private final Logger Logger = LoggerFactory.getLogger(ItemController.class);
    
    /**
     * 
     * 保存商品
     * @param item
     * @param desc
     * @return
     */
    @RequestMapping(method=RequestMethod.POST)
    public ResponseEntity<Void> saveItem(Item item,@RequestParam("desc") String desc,
            @RequestParam("itemParams") String itemParams){
        
        try {
            if(Logger.isDebugEnabled()){
                Logger.debug("新增商品，item={},desc={}",item,desc);
            }
            if(StringUtils.isEmpty(item.getTitle()) || StringUtils.length(item.getTitle())>100){
                //参数不合法
                if(Logger.isInfoEnabled()){
                    Logger.info("新增商品参数不合法，item={},desc={}",item,desc);
                }
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
            }
            //保存商品数据
            Boolean boolean1 = this.itemService.saveItem(item, desc,itemParams);
            if(boolean1){
                if(Logger.isDebugEnabled()){
                    Logger.debug("新增商品成功,id={}"+item.getId());
                }
                return ResponseEntity.status(HttpStatus.CREATED).build();
            }
        } catch (Exception e) {
            Logger.error("新增商品失败!item={},desc={}",item,desc);
        }
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        
    }
    
    /**
     * 
     * 分页查询
     * @param page
     * @param rows
     * @return
     */
    @RequestMapping(method=RequestMethod.GET)
    public ResponseEntity<EasyUIResult> queryItemList(
            @RequestParam(value="page",defaultValue="1")Integer page,
            @RequestParam(value="rows",defaultValue="30")Integer rows){
        
        try {
            EasyUIResult easyUIResult = this.itemService.queryItemList(page,rows);
            return ResponseEntity.ok(easyUIResult);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        
    }
    
    /**
     * 
     * 删除商品
     * @param ids
     * @return
     */
    @RequestMapping(method= RequestMethod.DELETE)
    public ResponseEntity<Void> deleteItemByIds(@RequestParam("ids") List<Object> ids){
        
        try {
            System.out.println(ids);
            
            Integer count = this.itemService.updateSelectiveByIds(ids);
            if(count>0){
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            }
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        
        
    }
    
    
    /**
     * 
     * 编辑商品
     * @param item
     * @param desc
     * @return
     */
    
    
    @RequestMapping(method=RequestMethod.PUT)
    public ResponseEntity<Void> updateItem(Item item,@RequestParam("desc") String desc){
        
        try {
            if(Logger.isDebugEnabled()){
                Logger.debug("编辑商品，item={},desc={}",item,desc);
            }
            if(StringUtils.isEmpty(item.getTitle()) || StringUtils.length(item.getTitle())>100){
                //参数不合法
                if(Logger.isInfoEnabled()){
                    Logger.info("商品参数不合法，item={},desc={}",item,desc);
                }
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
            }
            //保存商品数据
            Boolean boolean1 = this.itemService.updateItem(item, desc);
            if(boolean1){
                if(Logger.isDebugEnabled()){
                    Logger.debug("编辑商品成功,id={}"+item.getId());
                }
                return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
            }
        } catch (Exception e) {
            Logger.error("编辑商品失败!item={},desc={}",item,desc,e);
        }
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        
    }
    
    
    
    
    @RequestMapping(method=RequestMethod.GET)
    public ResponseEntity<Item> queryItemById(@RequestParam("itemId")Long ItemId){
        
        try {
            Item item = this.itemService.queryById(ItemId);
            
            return ResponseEntity.ok(item);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
    }
    
}
